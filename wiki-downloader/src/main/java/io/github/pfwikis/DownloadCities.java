package io.github.pfwikis;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Comparator;

import org.apache.commons.io.IOUtils;

import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

public class DownloadCities {

    public static void main(String[] args) throws MalformedURLException, IOException {
        String url = "https://pathfinderwiki.com/w/index.php?title=Special:CargoExport&tables=City%2C&&fields=City._pageName%2C+City.name%2C+City.population%2C+City.latlong&where=City.latlong__full+IS+NOT+NULL&order+by=%60mw_cargo__City%60.%60_pageName%60%2C%60mw_cargo__City%60.%60name%60%2C%60mw_cargo__City%60.%60population%60%2C%60mw_cargo__City%60.%60latlong__full%60&limit=1000&format=json";
        int offset = 0;
        var gson = new GsonBuilder().setPrettyPrinting().create();

        var cities = new ArrayList<JsonObject>();

        while(true) {
            try (var in = new URL(url+"&offset="+offset).openStream()) {
                String content = IOUtils.toString(in, StandardCharsets.UTF_8);
                var array = gson.fromJson(content, JsonArray.class);
                if(array.isEmpty()) {
                    break;
                }
                offset+=1000;
                array.forEach(e->cities.add(e.getAsJsonObject()));
            }
        }
        cities.sort(Comparator.comparing(e -> e.get("_pageName").getAsString()));


        System.out.println("Found "+cities.size()+" cities.");

        var arr = new JsonArray();
        for (var city : cities) {
            try {
                var feature = new JsonObject();
                feature.addProperty("type", "Feature");
                var properties = new JsonObject();
                feature.add("properties", properties);
                handleName(city, properties);
                properties.addProperty("link", "https://pathfinderwiki.com/wiki/"+city.get("_pageName").getAsString().replace(' ', '_'));
                properties.addProperty("capital", false);
                handlePopulation(city, feature);
                var geometry = new JsonObject();
                feature.add("geometry", geometry);
                geometry.addProperty("type", "Point");
                var coordinates = new JsonArray();
                geometry.add("coordinates", coordinates);
                coordinates.add(city.get("latlong  lon").getAsBigDecimal());
                coordinates.add(city.get("latlong  lat").getAsBigDecimal());
                arr.add(feature);
            } catch(Exception e) {
                System.err.println("Failed for "+city.get("_pageName").getAsString());
                e.printStackTrace();
            }
        }

        JsonObject result = new JsonObject();
        result.addProperty("type", "FeatureCollection");
        result.addProperty("name", "cities");
        result.addProperty("comment", "Do not edit this file! It will be automatically updated and all manual changes are lost.");
        result.add("crs", gson.fromJson("{ \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } }", JsonObject.class));
        result.add("features", arr);
        var rawResult = gson.toJson(result);
        Files.writeString(new File("../sources/cities.geojson").toPath(), rawResult);
    }

    private static void handleName(JsonObject city, JsonObject properties) {
        String name = city.get("_pageName").getAsString();
        name = name.replaceAll(" +\\(.*", "");
        properties.addProperty("Name", name);
    }

    private static void handlePopulation(JsonObject city, JsonObject feature) {
        var tippecanoe = new JsonObject();
        feature.add("tippecanoe", tippecanoe);

        long population;
        if(city.has("population") && !city.get("population").getAsString().isEmpty()) {
            population = city.get("population").getAsLong();
        }
        else {
            population = 1000;
        }

        if(population > 100000) {
            feature.getAsJsonObject("properties").addProperty("size", 0);
            tippecanoe.addProperty("minzoom", 2);
        }
        else if(population > 10000) {
            feature.getAsJsonObject("properties").addProperty("size", 1);
            tippecanoe.addProperty("minzoom", 4);
        }
        else if(population > 1000) {
            feature.getAsJsonObject("properties").addProperty("size", 2);
            tippecanoe.addProperty("minzoom", 5);
        }
        else {
            feature.getAsJsonObject("properties").addProperty("size", 3);
            tippecanoe.addProperty("minzoom", 6);
        }


    }
}
